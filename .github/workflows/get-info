#!/usr/bin/env perl

# This chunk of stuff was generated by App::FatPacker. To find the original
# file's code, look for the end of this BEGIN block or the string 'FATPACK'
BEGIN {
my %fatpacked;

s/^  //mg for values %fatpacked;

my $class = 'FatPacked::'.(0+\%fatpacked);
no strict 'refs';
*{"${class}::files"} = sub { keys %{$_[0]} };

if ($] < 5.008) {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      my $pos = 0;
      my $last = length $fat;
      return (sub {
        return 0 if $pos == $last;
        my $next = (1 + index $fat, "\n", $pos) || $last;
        $_ .= substr $fat, $pos, $next - $pos;
        $pos = $next;
        return 1;
      });
    }
  };
}

else {
  *{"${class}::INC"} = sub {
    if (my $fat = $_[0]{$_[1]}) {
      open my $fh, '<', \$fat
        or die "FatPacker error loading $_[1] (could be a perl installation issue?)";
      return $fh;
    }
    return;
  };
}

unshift @INC, bless \%fatpacked, $class;
  } # END OF FATPACK CODE


use strict;
use warnings;
use v5.14;

use Github::Actions;
use YAML;

if ( -f "DOCKER_USER" ) {
  say "❢ Usuario de Docker alternativo";
  open( my $fh, "<", "DOCKER_USER" ) || die "No puedo abrir DOCKER_USER";
  my $docker_user = <$fh>;
  chomp $docker_user;
  set_output( 'docker_user', $docker_user );
  set_env( 'DOCKER_USER', $docker_user );
} else {
  set_output( 'docker_user', $ENV{'user'} );
  set_env( 'DOCKER_USER', $ENV{'user'} );
}

my $cc;
eval { $cc = LoadFile("cc.yaml"); };
if ($@) {
  set_failed( sorry( "Hay algún problema leyendo «cc.yaml» ⤷ $@" ) );
} else {
  say all_good( "Fichero de configuración ⚙ «cc.yaml» encontrado" );
  if ( $cc->{'make'} ) {
    set_output( 'CC_ORDEN_TAREAS', $cc->{'make'});
    set_env( 'CC_ORDEN_TAREAS', $cc->{'make'});
  }
}
